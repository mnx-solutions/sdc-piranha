#!/usr/bin/env node

var unblockUser = false;
var argumentsError = false;
var uuid = null;
var riskScore = null;
var blockReason = null;
var badUuid = false;
process.argv = process.argv.slice(2); //cutting off node and path to file
process.argv.forEach(function (argument, index) {
    if (argument.indexOf('-') === 0) {
        if (argument === '-u' || argument === '--unblock') {
            unblockUser = true;
        } else if (argument === '--risk-score') {
            riskScore = parseFloat(process.argv[index + 1]);
            if (isNaN(riskScore) || riskScore <= 0 || riskScore >= 100) {
                argumentsError = true;
            }
        } else if (argument === '--block-reason') {
            blockReason = process.argv[index + 1];
        } else {
            argumentsError = true;
        }
    } else if (/^[0-9a-f\-]+$/.test(argument)) {
        if (argument.length === 36) {
            if (!uuid) {
                uuid = argument;
            } else {
                argumentsError = true;
            }
        } else {
            var prevArg = process.argv[index - 1];
            if (prevArg !== '--risk-score' && prevArg !== '--block-reason') {
                argumentsError = true;
                badUuid = true
            }
        }
    } else if (index >= 5) {
        argumentsError = true;
    }
});

if (!uuid || argumentsError) {
    console.log('Fraud Utility');
    console.log('');
    if (badUuid) {
        console.log('Bad user uuid');
    } else {
        console.log('fraudutil <UUID> [-u | --unblock] [--risk-score <number 0.01..99.99>] [--block-reason <reason text>]');
    }
    process.exit();
}

process.chdir(__dirname + '/..');
var config = require('easy-config');
var vasync = require('vasync');
var metadata = require('../site/modules/account/lib/metadata');
if (process.argv.length === 1 && uuid) {
    vasync.pipeline({
        'funcs': [
            function(_, callback) {
                get(metadata.SIGNUP_STEP, callback);
            },
            function(_, callback) {
                get(metadata.RISK_SCORE, callback);
            },
            function(_, callback) {
                get(metadata.RISK_SCORE_EXPLANATION, callback);
            },
            function(_, callback) {
                get(metadata.BLOCK_REASON, callback);
            }
        ]
    }, function(err) {
        if (err) {
            console.log(err);
            process.exit(1);
        }
        process.exit();
    });
} else {
    vasync.pipeline({
        'funcs': [
            function(_, callback) {
                if (unblockUser) {
                    set(metadata.SIGNUP_STEP, 'completed', callback);
                } else {
                    setImmediate(function() {
                        callback();
                    });
                }
            },
            function(_, callback) {
                if (riskScore) {
                    set(metadata.RISK_SCORE, (riskScore).toString(), callback);
                } else {
                    setImmediate(function() {
                        callback();
                    });
                }
            },
            function(_, callback) {
                if (blockReason) {
                    set(metadata.BLOCK_REASON, blockReason, callback);
                } else {
                    setImmediate(function() {
                        callback();
                    });
                }
            }
        ]
    }, function(err) {
        if (err) {
            console.log(err);
            process.exit(1);
        }
        process.exit();
    });
}

function set(key, val, callback) {
    metadata.set(uuid, key, val, function (err) {
        if (err) {
            callback(err);
        }
        console.log(key + ' set to ' + val);
        callback();
    });
}

function get(key, callback) {
    metadata.get(uuid, key, function (scoreError, scoreValue) {
        if (scoreError) {
            callback(scoreError);
        }
        console.log('User ' + key + ':' + scoreValue);
        callback();
    });
}
